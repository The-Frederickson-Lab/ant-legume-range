library(knitr)
library(taxize)
#Not run
#Legume range and nodulation data
range <- read.csv("legume_invasion_data_simonsenetal.csv") #Read in legume range data
names(range)[names(range) == "Species"] <- "Phy"
range$Phy <- as.character(gsub("_", " ", range$Phy))
#EFN data
EFN <- read.csv("EFNs_Weberatal_analysis_onlypresence.csv") #Read in EFN data
EFN$Phy <- as.character(gsub("_", " ", EFN$Phy))
#Domatia
domatia <- read.csv("domatia_chomickirenner_analysis_onlypresence.csv")  #Read in domatia data
names(domatia)[names(domatia) == 'Ã¯..Phy'] <- 'Phy'
domatia$Phy <- as.character(gsub("_", " ", domatia$Phy))
#Mycorrhizae
mycorrhizae <- read.csv("mycorrhizae_sou.csv") #Read in legume species in Soudzilovskaia et al.'s mycorrhizae dataset
mycorrhizae$Phy <- as.character(gsub("_", " ", mycorrhizae$species))
mycorrhizae$In.range.dataset <- mycorrhizae$Phy %in% range$Phy #Check which taxa are in range dataset
mycorrhizae <- subset(mycorrhizae, In.range.dataset) #Subset to just taxa with mycorrhizal trait data that are also in legume range dataset
#Not run
#Resolve names
domatia_resolve <- as.data.frame(gnr_resolve(domatia[, "Phy"], best_match_only=TRUE))
domatia <- merge(domatia, domatia_resolve, by.x = "Phy", by.y = "user_supplied_name", all.x=TRUE) #Merge resolved and original names
domatia$matched_name <- paste0(word(domatia$matched_name, 1, 1), " ", tolower(word(domatia$matched_name, 2, 2))) #Make lower case and reduce to just genus species (in other words, get rid of names of taxonomic authorities)
#Find synonyms for resolved names
domatia_synonyms_pow <- synonyms(domatia$matched_name, db="pow") #Get synonyms
domatia_syn <- as.data.frame(unlist(lapply(domatia_synonyms_pow, nth, 2))) #Make into dataframe
#Find synonyms for resolved names
domatia_synonyms_pow <- synonyms(domatia$matched_name, db="pow") #Get synonyms
domatia_syn <- as.data.frame(unlist(lapply(domatia_synonyms_pow, nth, 2))) #Make into dataframe
colnames(domatia_syn) <- "synonym" #Fix column name
domatia_syn$matched_name <- gsub('[[:digit:]]+', '', row.names(domatia_syn)) #Fix rownames
#Determine if original names and synonyms are in EFN, mycorrhizae, and range datasets
domatia_syn$synEFNY <- domatia_syn$synonym %in% EFN$Phy
domatia_syn$synrangeY <- domatia_syn$synonym %in% range$Phy
domatia_syn$synmycoY <- domatia_syn$synonym %in% mycorrhizae$Phy
write.csv(domatia_syn, "domatia_synonyms.csv") #Save synonyms
domatia_syn <- subset(domatia_syn, domatia_syn$synEFNY | domatia_syn$synrangeY | domatia_syn$synmycoY) #Subset if synonyms match other datasets
domatia_syn$Domatia <- 1 #Add trait
colnames(domatia_syn)[[1]] <- "Phy" #Fix column name
rownames(domatia_syn) <- c() #Remove row names
#Add synonyms to domatia dataset
domatia <- rbind(domatia[, c("Domatia", "Phy", "matched_name")], domatia_syn[, c("Domatia", "Phy","matched_name")]) #Merge
domatia$Phy <- trimws(domatia$Phy) #Trim white space from taxonomic names
#Check if each domatia name is in the EFN, mycorrhizae, and range datasets
domatia$RangeY <- domatia$Phy %in% range$Phy
domatia$EFNY <- domatia$Phy %in% EFN$Phy
write.csv(domatia, file="domatia_resolved.csv", row.names = FALSE)
#Not run
#Do the same as above for the EFN data
EFN_resolve <- as.data.frame(gnr_resolve(EFN[, "Phy"], best_match_only=TRUE))
EFN_resolve$num_words <- str_count(EFN_resolve$matched_name, " ")+1
EFN <- merge(EFN, EFN_resolve, by.y = "user_supplied_name", by.x = "Phy", all.x=TRUE)
EFN$matched_name <- ifelse(EFN$num_words == 1, NA, EFN$matched_name)
EFN$matched_name <- ifelse(!is.na(EFN$matched_name), paste0(word(EFN$matched_name, 1, 1), " ", tolower(word(EFN$matched_name, 2, 2))), EFN$matched_name)
EFN$matched_name <- ifelse(!is.na(EFN$matched_name), paste0(word(EFN$matched_name, 1, 1), " ", tolower(word(EFN$matched_name, 2, 2))), EFN$matched_name)
EFN$diff <- EFN$Phy == EFN$matched_name #Check changes between original and matched names
#Find synonyms for resolved names
#I had trouble getting this to work consistently so I retrieved the synonyms in batches
EFN_synonyms_pow1 <- synonyms(EFN[1:100,"matched_name"], db="pow") #Get synonyms
EFN_synonyms_pow2 <- synonyms(EFN[101:200,"matched_name"], db="pow")
EFN_synonyms_pow3 <- synonyms(EFN[201:400,"matched_name"], db="pow")
#Read in taxonomically resolved EFN and domatia datasets
EFN <- read.csv("efn_resolved.csv")
domatia <- read.csv("domatia_resolved.csv")
#Further cleaning of EFN and domatia datasets to
colnames(EFN)[[3]] <- "matched_name_EFN"
colnames(domatia)[[3]] <- "matched_name_domatia"
domatia$diff <- domatia$Phy == domatia$matched_name_domatia
EFN$diff <- EFN$Phy == EFN$matched_name_EFN
EFN <- subset(EFN, !is.na(diff))
EFN$matches <- EFN$RangeY+EFN$domY+EFN$mycoY
EFN <- subset(EFN, matches > 0)
EFN <- EFN[!duplicated(EFN), ]
EFN <- EFN[!duplicated(EFN$matched_name_EFN),]
#Merge
EFN_dom <- merge(EFN[,c("EFN", "Phy", "matched_name_EFN")], domatia[,c("Domatia", "Phy")], by="Phy", all=TRUE)
#Add zeros instead of NAs for traits
EFN_dom$EFN <- ifelse(is.na(EFN_dom$EFN), 0, EFN_dom$EFN)
EFN_dom$Domatia <- ifelse(is.na(EFN_dom$Domatia), 0, EFN_dom$Domatia)
#Not run
#Resolve names
mycorrhizae_resolve <- as.data.frame(gnr_resolve(mycorrhizae[, "Phy"], best_match_only=TRUE))
antarea <- read.csv("Ant_species_native range.csv") #native area for ants
invarea <- read.csv("invaded_area_ant_species.csv") #invaded area for ants - all types of introduction and all available data
ncontig <- read.csv("Ant_noncontig.csv")
abslat <- read.csv("absolute_native_lat_ants7Feb.csv") #Absolute midpoint latitude of native range
#merging invaded and native area datasets
nat_inv_area <- merge(invarea, antarea, by='Phy', all.y=TRUE)
nat_inv_area <- merge(nat_inv_area, ncontig, by='Phy')
nat_inv_area$total.area.introduced <- ifelse(is.na(nat_inv_area$total.area.introduced), 0, nat_inv_area$total.area.introduced) #Make NAs zeros
nat_inv_area_lat <- merge(abslat[, c("Phy", "abs_lat_native")], nat_inv_area, by = 'Phy') #Add midpoint native latitude
#Trait data from Kaur et al. (2019)
antefn <- read.csv("Species_EFN_Data.csv")
antdom <- read.csv("Species_Domatia_Data.csv")
antseed <- read.csv("Species_Seed_Dispersal_Data.csv")
#Creating merged datasets for area
efn_area <- merge(nat_inv_area_lat, antefn, by.y = "Phy", all = TRUE)
efn_dom_area <- merge(efn_area, antdom, by.y = "Phy", all = TRUE)
area <- merge(efn_dom_area, antseed, by.y = "Phy", all = TRUE)
#Make sure factors are factors
area$EFN <- as.factor(area$EFN)
area$Seed_Dispersal <- as.factor(area$Seed_Dispersal)
area$Domatia <- as.factor(area$Domatia)
#Exotic, intercepted, or indoor introduced
exotic <- read.csv("alien_exotic.csv")
indoor <- read.csv("alien_indoor.csv")
intercepted <- read.csv("alien_intercepted.csv")
#Add exotic, intercepted, or indoor introduced
area <- merge(area, exotic[, c("Phy", "Exotic_status")], by="Phy", all=TRUE)
colnames(area)[[16]] <- "ExoticY"
area <- merge(area, indoor[, c("Phy", "Exotic_status")], by="Phy", all=TRUE)
colnames(area)[[17]] <- "IndoorY"
area <- merge(area, intercepted[, c("Phy", "Exotic_status")], by="Phy", all=TRUE)
colnames(area)[[18]] <- "InterceptedY"
#Introduced?
area$introducedY <- ifelse(area$total.area.introduced > 0, 1, 0)
area$IndoorY <- ifelse(!is.na(area$IndoorY) & area$IndoorY == "Indoor Introduced" & area$introducedY == 1, 1, ifelse(is.na(area$IndoorY) & area$introducedY == 1, 0, NA))
area$ExoticY <- ifelse(!is.na(area$ExoticY) & area$ExoticY == "Exotic" & area$introducedY == 1, 1, ifelse(is.na(area$ExoticY) & area$introducedY == 1, 0, NA))
area$InterceptedY <- ifelse(!is.na(area$InterceptedY) & area$InterceptedY == "Intercepted" & area$introducedY == 1, 1, ifelse(is.na(area$InterceptedY) & area$introducedY == 1, 0, NA))
#add a column for ant tribe
tribe <- c()
for (i in area$Phy){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'ncbi'))
}
library(car)
library(ape)
library(geiger)
library(lme4)
library(nlme)
library(lmtest)
library(phytools)
library(caper)
library(tidyverse)
library(cowplot)
library(knitr)
library(taxize)
for (i in area$Phy){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'ncbi'))
}
tribe
#add a column for ant tribe
tribe <- c()
for (i in area$Phy){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'ncbi')$tribe)
}
tribe
#add a column for ant tribe
tribe <- c()
for (i in area$Phy){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
tribe
#add a column for ant tribe
tribe <- c()
for (i in area$Phy){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
#add a column for ant tribe
tribe <- c()
#add a column for ant tribe
tribe <- c()
for (i in area$Phy[1:200]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
warnings()
#add a column for ant tribe
tribe <- c()
for (i in area$Phy[1:200]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes.csv")
for (i in area$Phy[201:400]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes1.csv")
for (i in area$Phy[401:600]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes2.csv")
length(area$Phy)
for (i in area$Phy[601:1000]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
tribe <- read.csv("tribes2.csv")
View(tribe)
tribe <- tribe$x
for (i in area$Phy[601:800]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
for (i in area$Phy[801:1000]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
for (i in area$Phy[801:1000]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes3.csv")
for (i in area$Phy[1001:1200]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes4.csv")
for (i in area$Phy[1201:1400]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
for (i in area$Phy[1401:1600]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes5.csv")
for (i in area$Phy[1601:1800]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes6.csv")
for (i in area$Phy[1801:2000]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes7.csv")
for (i in area$Phy[2001:2200]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes8.csv")
for (i in area$Phy[2201:2400]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
1
write.csv(tribe, "tribes9.csv")
for (i in area$Phy[2401:2600]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes10.csv")
for (i in area$Phy[2601:2800]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes11.csv")
for (i in area$Phy[2801:3000]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes12.csv")
for (i in area$Phy[3001:3200]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes13.csv")
for (i in area$Phy[3201:3501]){
tribe <- append(tribe, tax_name(sci= i, get = 'tribe', db = 'itis')$tribe)
}
write.csv(tribe, "tribes14.csv")
length(tribe)
setwd("D:/PoojaCN/University of Toronto/Academics/Chapter 1 - Multiple mutualisms and diversification/Multiple mutualist data/ant-legume-range")
write.csv(area, "ant_areas.csv")
library(car)
library(ape)
library(geiger)
library(lme4)
library(nlme)
library(lmtest)
library(phytools)
library(caper)
library(tidyverse)
library(cowplot)
library(knitr)
library(taxize)
tax_name(sci= "Aenictus", get = 'tribe', db = 'itis')
tax_name(sci= "Aenictus", get = 'tribe', db = 'ncbi')
for (i in area$Phy[1:200]){
tribe <- append(tribe, tax_name(sci= i, get = 'subfamily', db = 'itis')$tribe)
}
tax_name(sci= "Aenictus", get = 'subfamily', db = 'itis')
head(area)
#add a column for ant tribe
genus <- as.factor(word(area$Phy, 1, 1, sep="_")) #
head(genus)
View(genus)
#add a column for ant tribe
genus <- word(area$Phy, 1, 1, sep="_") #
View(genus)
subfamily <- c()
for (i in genus[1:400]){
subfamily <- append(subfamily, tax_name(sci= i, get = 'subfamily', db = 'itis')$subfamily)
}
length(genus)
length(subfamily)
write.csv(subfamily, "subfamily.csv")
for (i in genus[401:800]){
subfamily <- append(subfamily, tax_name(sci= i, get = 'subfamily', db = 'itis')$subfamily)
}
write.csv(subfamily, "subfamily.csv")
for (i in genus[801:1200]){
subfamily <- append(subfamily, tax_name(sci= i, get = 'subfamily', db = 'itis')$subfamily)
}
length(subfamily)
write.csv(subfamily, "subfamily.csv")
for (i in genus[1201:2000]){
subfamily <- append(subfamily, tax_name(sci= i, get = 'subfamily', db = 'itis')$subfamily)
}
length(subfamily)
write.csv(subfamily, "subfamily.csv")
for (i in genus[2001:3000]){
subfamily <- append(subfamily, tax_name(sci= i, get = 'subfamily', db = 'itis')$subfamily)
}
subfamily <- read.csv("subfamily.csv")
subfamily <- subfamily$x
head(subfamily)
for (i in genus[2001:3000]){
subfamily <- append(subfamily, tax_name(sci= i, get = 'subfamily', db = 'itis')$subfamily)
}
length(subfamily)
for (i in genus[2924:3501]){
subfamily <- append(subfamily, tax_name(sci= i, get = 'subfamily', db = 'itis')$subfamily)
}
length(subfamily)
write.csv(subfamily, "subfamily.csv")
for (i in genus[3291:3501]){
subfamily <- append(subfamily, tax_name(sci= i, get = 'subfamily', db = 'itis')$subfamily)
}
length(subfamily)
write.csv(subfamily, "subfamily.csv")
area <- data.frame(area, subfamily)
write.csv(area, "ant_areas.csv")
area <- read.csv("ant_areas.csv")
area <- read.csv("ant_areas.csv")
head(area)
#Introduction success
binomial6 <- glmer(introducedY~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=area, family="binomial")
View(area)
length(area$Tribe)
#Introduction success
binomial6 <- glmer(introducedY~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|Tribe), data=area, family="binomial")
help('isSingular')
summary(binomial6)
#Total introduced area
lmer9 <- lmer(log(total.area.introduced)~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|Tribe), data=subset(area, introducedY == 1))
summary(lmer9)
Anova(lmer9, type=3)
#Total non-contiguous ranges
lmer9i <- lmer(log(Non_cont)~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=subset(area, introducedY == 1))
#Total non-contiguous ranges
lmer9i <- lmer(log(Non_cont)~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|Tribe), data=subset(area, introducedY == 1))
#Native range area
lmer10 <- lmer(log(total.area.native)~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+(1|Tribe), data=area)
binomial7 <- glmer(ExoticY~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|Tribe), data=subset(area, introducedY == 1), family="binomial")
binomial8 <- glmer(IndoorY~EFN+Seed_Dispersal+Domatia+scale(abs_lat_native)+scale(total.area.native)+(1|Tribe), data=subset(area, introducedY == 1), family="binomial")
binomial9 <- glmer(InterceptedY~EFN+Seed_Dispersal+Domatia+scale(abs_lat_native)+scale(total.area.native)+(1|Tribe), data=subset(area, introducedY == 1), family="binomial")
summary(binomial9)
library(corrplot)
install.packages("corrplot")
library(corrplot)
head(df)
#Read in taxonomically resolved EFN and domatia datasets
EFN <- read.csv("efn_resolved.csv")
domatia <- read.csv("domatia_resolved.csv")
colnames(EFN)[[3]] <- "matched_name_EFN"
colnames(domatia)[[3]] <- "matched_name_domatia"
domatia$diff <- domatia$Phy == domatia$matched_name_domatia
EFN$diff <- EFN$Phy == EFN$matched_name_EFN
EFN <- subset(EFN, !is.na(diff))
EFN$matches <- EFN$RangeY+EFN$domY+EFN$mycoY
EFN <- subset(EFN, matches > 0)
EFN <- EFN[!duplicated(EFN), ]
EFN <- EFN[!duplicated(EFN$matched_name_EFN),]
#Merge
EFN_dom <- merge(EFN[,c("EFN", "Phy", "matched_name_EFN")], domatia[,c("Domatia", "Phy")], by="Phy", all=TRUE)
#Add zeros instead of NAs for traits
EFN_dom$EFN <- ifelse(is.na(EFN_dom$EFN), 0, EFN_dom$EFN)
EFN_dom$Domatia <- ifelse(is.na(EFN_dom$Domatia), 0, EFN_dom$Domatia)
#Read in taxonomically resolved mycorrhizal dataset
mycorrhizae <- read.csv("mycorrhizae_resolved.csv")
#A little further cleaning of mycorrhizal dataset, to remove taxa that appear twice
mycorrhizae <- mycorrhizae %>% group_by(Phy, RangeY, domY, efnY) %>% summarize(n.records=sum(n), sum.AM = sum(sum.AM), sum.EM=sum(sum.EM))
library(car)
library(ape)
library(geiger)
library(lme4)
library(nlme)
library(lmtest)
library(phytools)
library(caper)
library(tidyverse)
library(cowplot)
library(knitr)
library(taxize)
library(corrplot)
range <- read.csv("inv_dat_by_species_simonsen2017.csv") #Read in legume range data
names(range)[names(range) == "Species"] <- "Phy"
range$Phy <- as.character(gsub("_", " ", range$Phy))
#EFN data
EFN <- read.csv("EFNs_Weberatal_analysis_onlypresence.csv") #Read in EFN data
EFN$Phy <- as.character(gsub("_", " ", EFN$Phy))
domatia <- read.csv("domatia_chomickirenner_analysis_onlypresence.csv")  #Read in domatia data
names(domatia)[names(domatia) == 'Ã¯..Phy'] <- 'Phy'
domatia$Phy <- as.character(gsub("_", " ", domatia$Phy))
mycorrhizae <- read.csv("mycorrhizae_sou.csv") #Read in legume species in Soudzilovskaia et al.'s mycorrhizae dataset
mycorrhizae$Phy <- as.character(gsub("_", " ", mycorrhizae$species))
mycorrhizae$In.range.dataset <- mycorrhizae$Phy %in% range$Phy #Check which taxa are in range dataset
mycorrhizae <- subset(mycorrhizae, In.range.dataset) #Subset to just taxa with mycorrhizal trait data that are also in legume range dataset
#Read in taxonomically resolved EFN and domatia datasets
EFN <- read.csv("efn_resolved.csv")
domatia <- read.csv("domatia_resolved.csv")
colnames(EFN)[[3]] <- "matched_name_EFN"
colnames(domatia)[[3]] <- "matched_name_domatia"
domatia$diff <- domatia$Phy == domatia$matched_name_domatia
EFN$diff <- EFN$Phy == EFN$matched_name_EFN
EFN <- subset(EFN, !is.na(diff))
EFN$matches <- EFN$RangeY+EFN$domY+EFN$mycoY
EFN <- subset(EFN, matches > 0)
EFN <- EFN[!duplicated(EFN), ]
EFN <- EFN[!duplicated(EFN$matched_name_EFN),]
#Merge
EFN_dom <- merge(EFN[,c("EFN", "Phy", "matched_name_EFN")], domatia[,c("Domatia", "Phy")], by="Phy", all=TRUE)
#Add zeros instead of NAs for traits
EFN_dom$EFN <- ifelse(is.na(EFN_dom$EFN), 0, EFN_dom$EFN)
EFN_dom$Domatia <- ifelse(is.na(EFN_dom$Domatia), 0, EFN_dom$Domatia)
#Read in taxonomically resolved mycorrhizal dataset
mycorrhizae <- read.csv("mycorrhizae_resolved.csv")
mycorrhizae <- mycorrhizae %>% group_by(Phy, RangeY, domY, efnY) %>% summarize(n.records=sum(n), sum.AM = sum(sum.AM), sum.EM=sum(sum.EM))
mycorrhizae$AM <- ifelse(mycorrhizae$sum.AM > 0, "Y", "N")
mycorrhizae$EM <- ifelse(mycorrhizae$sum.EM > 0, "Y", "N")
#Merge
EFN_dom_myco <- merge(mycorrhizae, EFN_dom, by="Phy", all=TRUE)
range <- read.csv("range_resolved.csv")
legume_range_df <- merge(range, EFN_dom_myco, all.x="TRUE", all.y="FALSE", by= "Phy") #Put all the data in one dataframe
legume_range_df$EFN <- ifelse(is.na(legume_range_df$EFN), 0, legume_range_df$EFN) #Add zeros for NAs in EFN trait
legume_range_df$Domatia <- ifelse(is.na(legume_range_df$Domatia), 0, legume_range_df$Domatia)
df$genus <- as.factor(word(df$Phy2, 1, 1, sep="_")) #Extract legume genus
legume_range_df$EFN <- as.factor(legume_range_df$EFN)
legume_range_df$Domatia <- as.factor(legume_range_df$Domatia)
legume_range_df$fixer <- as.factor(legume_range_df$fixer)
legume_range_df$AM <- as.factor(legume_range_df$AM)
legume_range_df$EM <- as.factor(legume_range_df$EM)
legume_range_df$annual <- as.numeric(legume_range_df$annual)
legume_range_df$woody <- as.numeric(legume_range_df$woody)
##Collapse all mycorrhizal fungi types into a single yes/no category
legume_range_df$myco <- ifelse(legume_range_df$AM == "Y" | legume_range_df$EM == "Y", 1, ifelse(legume_range_df$AM == "N" & legume_range_df$EM == "N", 0, NA))
legume_range_df$myco <- as.factor(legume_range_df$myco)
df <- legume_range_df
View(df)
#Checking correlation between variables
df_chisq <- data.frame(df$num_introduced, df$total_area_introduced, df$total_area_native, df$abs_lat_native, df$fixer,
df$woody, df$annual, df$uses_num_uses, df$AM, df$EM, df$EFN, df$Domatia)
chisq1 <- chisq.test(df)
#Checking correlation between variables
df_chisq <- data.frame(df$abs_lat_native, df$fixer,
df$woody, df$annual, df$uses_num_uses, df$AM, df$EM, df$EFN, df$Domatia)
chisq1 <- chisq.test(df)
#Checking correlation between variables
df_chisq <- data.frame(df$abs_lat_native, df$fixer,
df$woody, df$annual, df$uses_num_uses, df$EFN, df$Domatia)
chisq1 <- chisq.test(df)
#Checking correlation between variables
df_chisq <- data.frame(df$abs_lat_native, df$fixer,
df$woody, df$annual, df$uses_num_uses)
chisq1 <- chisq.test(df)
#Checking correlation between variables
df_chisq <- data.frame(df$abs_lat_native, df$fixer)
chisq1 <- chisq.test(df)
#Checking correlation between variables
df_chisq <- data.frame(df$abs_lat_native, df$total_area_introduced)
chisq1 <- chisq.test(df)
#Checking correlation between variables
df_chisq <- data.frame(df$EFN, df$Domatia)
chisq1 <- chisq.test(df)
chisq1 <- chisq.test(df_chisq)
str(df$EFN)
str(df$Domatia
str(df$Domatia)
cor <- cor(df)
cor <- cor(df_chisq)
#Checking correlation between variables
df_chisq <- data.frame(df$EFN, df$Domatia, df$EM)
chisq1 <- chisq.test(df_chisq)
#Checking correlation between variables
df_chisq <- data.frame(as.numeric(df$EFN), as.numeric(df$Domatia), as.numeric(df$EM))
cor <- cor(df_chisq)
#Checking correlation between variables
df_cor <- data.frame(as.numeric(df$fixer), as.numeric(df$EFN), as.numeric(df$Domatia), as.numeric(df$EM), as.numeric(df$AM), #mutualisms
df$woody, df$annual, df$uses_num_uses) #covariates
cor <- cor(df_cor)
corr <- cor(df_cor)
corrplot(corr, is.cor = FALSE, type = "upper")
install.packages("Hmisc")
library(Hmisc)
res2 <- rcorr(as.matrix(df_cor))
res2
res2
colnames(df_cor) <- c("fixer", "EFN", "Domatia", "EM", "AM", "Woody", "Annual", "Uses")
corr <- rcorr(as.matrix(df_cor))
plotr <- corrplot(corr$r, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
plotp <- corrplot(corr$p, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45) #p-values
plotp <- corrplot(corr$P, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45) #p-values
#Correlations between variables
df_ant_cor <- data.frame(area$abs_lat_native, as.numeric(area$EFN), as.numeric(area$Domatia), as.numeric(area$Seed_Dispersal))
#Checking correlation between variables
df_cor <- data.frame(as.numeric(df$fixer), as.numeric(df$EFN), as.numeric(df$Domatia), as.numeric(df$EM), as.numeric(df$AM), #mutualisms
df$woody, df$annual, df$uses_num_uses, df$abs_lat_native) #covariates
# <- cor(df_cor)
colnames(df_cor) <- c("fixer", "EFN", "Domatia", "EM", "AM", "Woody", "Annual", "Uses", "Abs_lat")
corr <- rcorr(as.matrix(df_cor))
plotr <- corrplot(corr$r, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45) #correlation coeffs
#covariates
# <- cor(df_cor)
colnames(df_ant_cor) <- c("Abs_lat", "EFN", "Domatia", "Seed_dispersal")
corr <- rcorr(as.matrix(df_ant_cor))
corr_ant <- rcorr(as.matrix(df_ant_cor))
plotr <- corrplot(corr_ant$r, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45) #correlation coeffs
plotp <- corrplot(corr_ant$P, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45) #p-values
plotr <- corrplot(corr_ant$r, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45) #correlation coeffs
View(df)
