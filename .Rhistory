fig5
save_plot("Figure5.pdf", fig5, base_height = 4, base_width = 12)
save_plot("Figure5.png", fig5, base_height = 4, base_width = 12)
#Checking the dependence of the proportion of species introduced and the number of non-contiguous ranges on mutualism
#Introduction success
binomial5 <- lme4::glmer(introducedY~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=area, family="binomial")
summary(binomial5)
car::Anova(binomial5, type=3)
#plot(binomial5)
#Total non-contiguous ranges
lmer7 <- lmer(log(n_introduced_ranges)~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=subset(area, introducedY == 1))
summary(lmer7)
Anova(lmer7, type=3)
#plot(lmer7)
#Use DHARMa package to examine model fit
testDispersion(lmer7)
simulationOutput_lmer7 <- simulateResiduals(fittedModel = lmer7, plot=T)
#Negative binomial model for count data
nb4 <- glmer.nb(n_introduced_ranges~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=subset(area, introducedY == 1))
summary(nb4)
#Use DHARMa package to examine model fit
testDispersion(nb4)
simulationOutput_nb4 <- simulateResiduals(fittedModel = nb4, plot=T)
#Native range area
lmer10 <- lmer(log(total.area.native)~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+(1|tribe), data=area)
summary(lmer10)
Anova(lmer10, type=3)
#plot(lmer10)
#Calculating the number of mutualisms that each ant species participates in
area$num.mm <- as.numeric(as.character(area$Seed_Dispersal))+as.numeric(as.character(area$Domatia))+as.numeric(as.character(area$EFN))
#Model to understand if introduction success varies with number of mutualisms
binomial10 <- glmer(introducedY ~ num.mm + scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=area, family ="binomial")
summary(binomial10)
Anova(binomial10, type=3)
#plot(binomial10)
#Model to understand if the number of introduced ranges vary with number of mutualisms
lmer11 <- lmer(log(n_introduced_ranges)~num.mm + scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=subset(area, introducedY == 1))
summary(lmer11)
Anova(lmer11, type=3)
#Use DHARMa package to examine model fit
testDispersion(lmer11)
simulationOutput_lmer11 <- simulateResiduals(fittedModel = lmer11, plot=T)
#Negative binomial GLMM
nb5 <- glmer.nb(n_introduced_ranges~num.mm + scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=subset(area, introducedY == 1))
summary(nb5)
#Use DHARMa package to examine model fit
testDispersion(nb5)
simulationOutput_nb5 <- simulateResiduals(fittedModel = nb5, plot=T)
#Making figures to understand the effects of the number of mutualisms on introduction success
#and number of introiduced ranges
#Introduction success
summary.ant.mm <- ungroup(subset(area, !is.na(introducedY)) %>% group_by(num.mm, introducedY) %>% dplyr::summarize(n=n()))
summary.ant.mm.wide <- spread(summary.ant.mm, key=introducedY, value=n)
colnames(summary.ant.mm.wide) <- c("Num_mutualisms","Not_introduced",  "Introduced")
summary.ant.mm.wide$total <- summary.ant.mm.wide$Not_introduced+summary.ant.mm.wide$Introduced
summary.ant.mm.wide$prop.introduced <- summary.ant.mm.wide$Introduced/(summary.ant.mm.wide$total)
prop.ant.mm <- paste0(summary.ant.mm.wide$Introduced, "/", summary.ant.mm.wide$total)
prop.ant.mm <- prop.ant.mm[1:4]
inset_p_antmm <- ggplot(data=subset(summary.ant.mm.wide, !is.na(Num_mutualisms)),aes(x=Num_mutualisms, y=prop.introduced))+geom_bar(stat="identity")+theme_cowplot()+ylab("Introduced (prop.)")+xlab("Mutualistic traits (no.)")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.55, label = "***")+geom_text(aes(x=Num_mutualisms, y=0.05, label=prop.ant.mm), color="white")
#Number of introduced ranges
summary.ant.mnum1 <- subset(area, !is.na(num.mm) & introducedY == 1) %>% group_by(num.mm) %>% dplyr::summarize(n=n(), mean_area_introduced = mean(n_introduced_ranges, na.rm=TRUE), sd_area_introduced = sd(n_introduced_ranges, na.rm=TRUE), se_area_introduced = sd_area_introduced/sqrt(n))
summary.ant.mnum1$num.mm <- as.factor(summary.ant.mnum1$num.mm)
p_num_mm <- ggplot(data=summary.ant.mnum1, aes(x=num.mm, y=mean_area_introduced))+geom_point(size=pt_size)+geom_errorbar(aes(x=num.mm, ymin=mean_area_introduced-se_area_introduced, ymax=mean_area_introduced+se_area_introduced), width=er_width)+theme_cowplot()+ylab("Introduced range (sq. km)")+geom_line(aes(group=1),linetype="dashed")+xlab("Mutualistic traits (no.)")+geom_text(aes(x=num.mm, y= -1, label=n))+annotate("text", x=2.5, y=25, label="**")
fig6 <- plot_grid(inset_p_antmm, p_num_mm, ncol=1, labels="AUTO", align='v', axis='lr')
fig6
save_plot("Figure6.pdf", fig6, base_height = 8, base_width=5)
#Making figures
# Exotic
area$ExoticY <- as.factor(area$ExoticY)
exotic.efn <- ungroup(subset(area, introducedY ==1 & !is.na(EFN)) %>% group_by(EFN, ExoticY) %>% dplyr::summarize(n=n()))
exotic.efn.wide <- spread(exotic.efn, key = ExoticY, value=n)
colnames(exotic.efn.wide) <- c("EFN","Not_exotic",  "Exotic")
exotic.efn.wide$EFN <- c("No", "Yes")
exotic.efn.wide$total <- exotic.efn.wide$Not_exotic + exotic.efn.wide$Exotic
exotic.efn.wide$prop.exotic <- exotic.efn.wide$Exotic/exotic.efn.wide$total
prop.exotic.efn <- paste0(exotic.efn.wide$Exotic, "/", exotic.efn.wide$total)
p_exoticefn <- ggplot(data=exotic.efn.wide, aes(x=EFN, y=prop.exotic))+geom_bar(stat="identity")+theme_cowplot()+ylab("Naturalized (prop.)")+xlab("Visits EFNs")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.85, label = "ns")+geom_text(aes(x=EFN, y=0.05, label=prop.exotic.efn), color="white")
exotic.dom <- ungroup(subset(area, introducedY ==1 & !is.na(Domatia)) %>% group_by(Domatia, ExoticY) %>% dplyr::summarize(n=n()))
exotic.dom.wide <- spread(exotic.dom, key = ExoticY, value=n)
colnames(exotic.dom.wide) <- c("Domatia","Not_exotic",  "Exotic")
exotic.dom.wide$Domatia <- c("No", "Yes")
exotic.dom.wide$total <- exotic.dom.wide$Not_exotic + exotic.dom.wide$Exotic
exotic.dom.wide$prop.exotic <- exotic.dom.wide$Exotic/exotic.dom.wide$total
prop.exotic.dom <- paste0(exotic.dom.wide$Exotic, "/", exotic.dom.wide$total)
p_exoticdom <- ggplot(data=exotic.dom.wide, aes(x=Domatia, y=prop.exotic))+geom_bar(stat="identity")+theme_cowplot()+ylab("Naturalized (prop.)")+xlab("Nests in domatia")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.85, label = "ns")+geom_text(aes(x=Domatia, y=0.05, label=prop.exotic.dom), color="white")
exotic.seed <- ungroup(subset(area, introducedY ==1 & !is.na(Seed_Dispersal)) %>% group_by(Seed_Dispersal, ExoticY) %>% dplyr::summarize(n=n()))
exotic.seed.wide <- spread(exotic.seed, key = ExoticY, value=n)
colnames(exotic.seed.wide) <- c("Seed_Dispersal","Not_exotic",  "Exotic")
exotic.seed.wide$Seed_Dispersal <- c("No", "Yes")
exotic.seed.wide$total <- exotic.seed.wide$Not_exotic + exotic.seed.wide$Exotic
exotic.seed.wide$prop.exotic <- exotic.seed.wide$Exotic/exotic.seed.wide$total
prop.exotic.seed <- paste0(exotic.seed.wide$Exotic, "/", exotic.seed.wide$total)
p_exoticseed <- ggplot(data=exotic.seed.wide, aes(x=Seed_Dispersal, y=prop.exotic))+geom_bar(stat="identity")+theme_cowplot()+ylab("Naturalized (prop.)")+xlab("Disperses seeds")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.85, label = "ns")+geom_text(aes(x=Seed_Dispersal, y=0.05, label=prop.exotic.seed), color="white")
p_exotic <- plot_grid(p_exoticefn, p_exoticdom, p_exoticseed, nrow=1, labels=c("G", "H", "I"))
#Binomial model to understand how the introduction success of naturalized species depends of mutualism participation
binomial7 <- glmer(ExoticY~EFN+Domatia+Seed_Dispersal+scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=subset(area, introducedY == 1), family="binomial")
summary(binomial7)
Anova(binomial7, type=3)
#plot(binomial7)
#Indoors?
area$IndoorY <- as.factor(area$IndoorY)
indoor.efn <- ungroup(subset(area, introducedY ==1 & !is.na(EFN)) %>% group_by(EFN, IndoorY) %>% dplyr::summarize(n=n()))
indoor.efn.wide <- spread(indoor.efn, key = IndoorY, value=n)
colnames(indoor.efn.wide) <- c("EFN","Not_indoor",  "indoor")
indoor.efn.wide$EFN <- c("No", "Yes")
indoor.efn.wide$total <- indoor.efn.wide$Not_indoor + indoor.efn.wide$indoor
indoor.efn.wide$prop.indoor <- indoor.efn.wide$indoor/indoor.efn.wide$total
prop.indoor.efn <- paste0(indoor.efn.wide$indoor, "/", indoor.efn.wide$total)
p_indoorefn <- ggplot(data=indoor.efn.wide, aes(x=EFN, y=prop.indoor))+geom_bar(stat="identity")+theme_cowplot()+ylab("Indoors (prop.)")+xlab("Visits EFNs")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.85, label = "**")+geom_text(aes(x=EFN, y=0.05, label=prop.indoor.efn), color="white")
indoor.dom <- ungroup(subset(area, introducedY ==1 & !is.na(Domatia)) %>% group_by(Domatia, IndoorY) %>% dplyr::summarize(n=n()))
indoor.dom.wide <- spread(indoor.dom, key = IndoorY, value=n)
colnames(indoor.dom.wide) <- c("Domatia","Not_indoor",  "indoor")
indoor.dom.wide$Domatia <- c("No", "Yes")
indoor.dom.wide$total <- indoor.dom.wide$Not_indoor + indoor.dom.wide$indoor
indoor.dom.wide$prop.indoor <- indoor.dom.wide$indoor/indoor.dom.wide$total
prop.indoor.dom <- paste0(indoor.dom.wide$indoor, "/", indoor.dom.wide$total)
p_indoordom <- ggplot(data=indoor.dom.wide, aes(x=Domatia, y=prop.indoor))+geom_bar(stat="identity")+theme_cowplot()+ylab("Indoors (prop.)")+xlab("Nests in domatia")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.85, label = "ns")+geom_text(aes(x=Domatia, y=0.05, label=prop.indoor.dom), color="white")
indoor.seed <- ungroup(subset(area, introducedY ==1 & !is.na(Seed_Dispersal)) %>% group_by(Seed_Dispersal, IndoorY) %>% dplyr::summarize(n=n()))
indoor.seed.wide <- spread(indoor.seed, key = IndoorY, value=n)
colnames(indoor.seed.wide) <- c("Seed_Dispersal","Not_indoor",  "indoor")
indoor.seed.wide$Seed_Dispersal <- c("No", "Yes")
indoor.seed.wide$total <- indoor.seed.wide$Not_indoor + indoor.seed.wide$indoor
indoor.seed.wide$prop.indoor <- indoor.seed.wide$indoor/indoor.seed.wide$total
prop.indoor.seed <- paste0(indoor.seed.wide$indoor, "/", indoor.seed.wide$total)
p_indoorseed <- ggplot(data=indoor.seed.wide, aes(x=Seed_Dispersal, y=prop.indoor))+geom_bar(stat="identity")+theme_cowplot()+ylab("Indoors (prop.)")+xlab("Disperses seeds")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.85, label = "**")+geom_text(aes(x=Seed_Dispersal, y=0.05, label=prop.indoor.seed), color="white")
p_indoor <- plot_grid(p_indoorefn, p_indoordom, p_indoorseed, nrow=1, labels=c("D","E", "F"))
#Binomial model to understand how the introduction success of indoor introduced species depends of mutualism participation
binomial8 <- glmer(IndoorY~EFN+Seed_Dispersal+Domatia+scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=subset(area, introducedY == 1), family="binomial")
summary(binomial8)
Anova(binomial8, type=3)
#plot(binomial8)
#Intercepted
area$InterceptedY <- as.factor(area$InterceptedY)
intercepted.efn <- ungroup(subset(area, introducedY ==1 & !is.na(EFN)) %>% group_by(EFN, InterceptedY) %>% dplyr::summarize(n=n()))
intercepted.efn.wide <- spread(intercepted.efn, key = InterceptedY, value=n)
colnames(intercepted.efn.wide) <- c("EFN","Not_intercepted",  "intercepted")
intercepted.efn.wide$EFN <- c("No", "Yes")
intercepted.efn.wide$total <- intercepted.efn.wide$Not_intercepted + intercepted.efn.wide$intercepted
intercepted.efn.wide$prop.intercepted <- intercepted.efn.wide$intercepted/intercepted.efn.wide$total
prop.intercepted.efn <- paste0(intercepted.efn.wide$intercepted, "/", intercepted.efn.wide$total)
p_interceptedefn <- ggplot(data=intercepted.efn.wide, aes(x=EFN, y=prop.intercepted))+geom_bar(stat="identity")+theme_cowplot()+ylab("Intercepted (prop.)")+xlab("Visits EFNs")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.85, label = "ns")+geom_text(aes(x=EFN, y=0.05, label=prop.intercepted.efn), color="white")
intercepted.dom <- ungroup(subset(area, introducedY ==1 & !is.na(Domatia)) %>% group_by(Domatia, InterceptedY) %>% dplyr::summarize(n=n()))
intercepted.dom.wide <- spread(intercepted.dom, key = InterceptedY, value=n)
colnames(intercepted.dom.wide) <- c("Domatia","Not_intercepted",  "intercepted")
intercepted.dom.wide$Not_intercepted <- ifelse(is.na(intercepted.dom.wide$Not_intercepted), 0, intercepted.dom.wide$Not_intercepted)
intercepted.dom.wide$Domatia <- c("No", "Yes")
intercepted.dom.wide$total <- intercepted.dom.wide$Not_intercepted + intercepted.dom.wide$intercepted
intercepted.dom.wide$prop.intercepted <- intercepted.dom.wide$intercepted/intercepted.dom.wide$total
prop.intercepted.dom <- paste0(intercepted.dom.wide$intercepted, "/", intercepted.dom.wide$total)
p_intercepteddom <- ggplot(data=intercepted.dom.wide, aes(x=Domatia, y=prop.intercepted))+geom_bar(stat="identity")+theme_cowplot()+ylab("Intercepted (prop.)")+xlab("Nests in domatia")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.45, y = 0.85, label = "ns")+geom_text(aes(x=Domatia, y=0.05, label=prop.intercepted.dom), color="white")
intercepted.seed <- ungroup(subset(area, introducedY ==1 & !is.na(Seed_Dispersal)) %>% group_by(Seed_Dispersal, InterceptedY) %>% dplyr::summarize(n=n()))
intercepted.seed.wide <- spread(intercepted.seed, key = InterceptedY, value=n)
colnames(intercepted.seed.wide) <- c("Seed_Dispersal","Not_intercepted",  "intercepted")
intercepted.seed.wide$Seed_Dispersal <- c("No", "Yes")
intercepted.seed.wide$total <- intercepted.seed.wide$Not_intercepted + intercepted.seed.wide$intercepted
intercepted.seed.wide$prop.intercepted <- intercepted.seed.wide$intercepted/intercepted.seed.wide$total
prop.intercepted.seed <- paste0(intercepted.seed.wide$intercepted, "/", intercepted.seed.wide$total)
p_interceptedseed <- ggplot(data=intercepted.seed.wide, aes(x=Seed_Dispersal, y=prop.intercepted))+geom_bar(stat="identity")+theme_cowplot()+ylab("Intercepted (prop.)")+xlab("Disperses seeds")+scale_y_continuous(limits=y_inset_limits)+annotate("text", x = 1.5, y = 0.85, label = "***")+geom_text(aes(x=Seed_Dispersal, y=0.05, label=prop.intercepted.seed), color="white")
p_intercepted <- plot_grid(p_interceptedefn, p_intercepteddom, p_interceptedseed, nrow=1, labels="AUTO")
#Binomial model to understand how the introduction success of species intercepted by customs depends of mutualism participation
binomial9 <- glmer(InterceptedY~EFN+Seed_Dispersal+Domatia+scale(abs_lat_native)+scale(total.area.native)+(1|tribe), data=subset(area, introducedY == 1), family="binomial")
summary(binomial9)
Anova(binomial9, type=3)
#plot(binomial9)
fig7 <- plot_grid(p_intercepted, p_indoor, p_exotic, nrow=3)
fig7
save_plot("Figure7.pdf", fig7, base_height=8, base_width=8)
save_plot("Figure7.png", fig7, base_height=8, base_width=8)
pal="Saguaro"
color_EFN = park_palette(pal)[1]
antmaps_native_df <- read_csv("GABI_Data_Release1.0_18012020.csv")
antmaps_df <- antmaps_native_df[, c("valid_species_name", "bentity2_name")]
#Merge with trait data
antmaps_df$match_name <- gsub("\\.", "_", antmaps_df$valid_species_name)
antmaps_df <- merge(antmaps_df, area, by.x="match_name", by.y="Phy")
# Read the spatial polygons using sf
ant_polygons <- st_read(dsn = 'Bentity2_shapefile_fullres/', layer = 'Bentity2_shapefile_fullres')
library(sp)
antmaps_native_df <- read_csv("GABI_Data_Release1.0_18012020.csv")
antmaps_df <- antmaps_native_df[, c("valid_species_name", "bentity2_name")]
#Merge with trait data
antmaps_df$match_name <- gsub("\\.", "_", antmaps_df$valid_species_name)
antmaps_df <- merge(antmaps_df, area, by.x="match_name", by.y="Phy")
# Read the spatial polygons using sf
ant_polygons <- st_read(dsn = 'Bentity2_shapefile_fullres/', layer = 'Bentity2_shapefile_fullres')
library(sf)
# Read the spatial polygons using sf
ant_polygons <- st_read(dsn = 'Bentity2_shapefile_fullres/', layer = 'Bentity2_shapefile_fullres')
# Rename the column in the spatial polygons dataset to match the merge column name
colnames(ant_polygons)[colnames(ant_polygons) == 'BENTITY2_N'] <- 'bentity2_name'
#EFNs
species_counts <- antmaps_df %>%
group_by(bentity2_name, EFN) %>%
summarise(num_species = n_distinct(valid_species_name.x))
# Merge the data with spatial polygons
merged_data <- merge(ant_polygons, species_counts, by = 'bentity2_name', all.x = TRUE)
# Plotting the variable on a world map
#Ants that visit EFNs
antmap1 <- ggplot() +
geom_sf(data = ant_polygons, fill="black")+
geom_sf(data = subset(merged_data, EFN == 1), aes(fill = num_species)) +
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Ant species that\nvisit EFNs (no.)")+theme_cowplot()
#Ants that do not visit EFNs
antmap2 <- ggplot() +
geom_sf(data = ant_polygons, fill="black")+
geom_sf(data = subset(merged_data, EFN == 0), aes(fill = num_species)) +
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Ant species that\ndo not visit EFNs (no.)")+theme_cowplot()
efn_map <- plot_grid(antmap1, antmap2, labels="AUTO", align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("EFN_map.pdf", efn_map, base_width=8, base_height = 8)
#Seed dispersal
species_counts <- antmaps_df %>%
group_by(bentity2_name, Seed_Dispersal) %>%
summarise(num_species = n_distinct(valid_species_name.x))
#Merge the data with spatial polygons
merged_data <- merge(ant_polygons, species_counts, by = 'bentity2_name', all.x = TRUE)
#Ants that disperse seeds
antmap3 <- ggplot() +
geom_sf(data = ant_polygons, fill="black")+
geom_sf(data = subset(merged_data, Seed_Dispersal == 1), aes(fill = num_species)) +
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Ant species that\ndisperse seeds (no.)")+theme_cowplot()
#Ants that do not disperse seeds
antmap4 <- ggplot() +
geom_sf(data = ant_polygons, fill="black")+
geom_sf(data = subset(merged_data, Seed_Dispersal == 0), aes(fill = num_species)) +
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Ant species that\ndo not disperse seeds (no.)")+theme_cowplot()
seed_map <- plot_grid(antmap3, antmap4, labels=c("C", "D"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("seed_map.pdf", seed_map, base_width=8, base_height = 8)
#Domatia
species_counts <- antmaps_df %>%
group_by(bentity2_name, Domatia) %>%
summarise(num_species = n_distinct(valid_species_name.x))
#Merge the data with spatial polygons
merged_data <- merge(ant_polygons, species_counts, by = 'bentity2_name', all.x = TRUE)
#Ants that nest in domatia
antmap5 <- ggplot() +
geom_sf(data = ant_polygons, fill="black")+
geom_sf(data = subset(merged_data, Domatia == 1), aes(fill = num_species)) +
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Ant species that\nnest in domatia (no.)")+theme_cowplot()
#Ants that do not nest in domatia
antmap6 <- ggplot() +
geom_sf(data = ant_polygons, fill="black")+
geom_sf(data = subset(merged_data, Domatia == 0), aes(fill = num_species)) +
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Ant species that\ndo not nest in domatia (no.)")+theme_cowplot()
antdom_map <- plot_grid(antmap5, antmap6, labels=c("E", "F"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("dom_map.pdf", antdom_map, base_width=8, base_height = 8)
## Making a similar map for legumes
# Read the .rds file
legume_pol <- readRDS("legume_range_polygons_data.rds")
#legume_range_df <- read.csv("legume_range_traits.csv")
#Extract unique polygons
#There is probably a better way to do this, but this works
tmp <- data.frame(code = NULL, index = NULL)
for (x in 1:length(legume_pol$polygon)) {
if(legume_pol$polygon[[x]]@data$Code %in% tmp$code) next()
tmp <- rbind((data.frame(code = legume_pol$polygon[[x]]@data$Code, index = x)), tmp)
}
unique_pols <- legume_pol[tmp$index, ]
unique_pols <- cbind(unique_pols, tmp)
#This is the base map
base_legume_map <- ggplot()+geom_sf(data = ant_polygons, fill="black")+theme_cowplot()
#+geom_sf(data=sf::st_as_sf(do.call(rbind, unique_pols$`polygon`)), fill="blue")
# Extract codes for each legume species
legume_pol$code<-NA
for (x in 1:length(legume_pol$polygon)) {
legume_pol[x, "code"] <- legume_pol$polygon[[x]]@data$Code
}
#Merge with trait data
merged_legume <- sp::merge(legume_pol, legume_range_df, by.x="species", by.y="Phy", all.x=TRUE, all.y=TRUE,duplicateGeoms = TRUE)
merged_legume <- as.data.frame(merged_legume)
#EFNs
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, EFN) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_EFN <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_EFN$`polygon`)
attribute_data <- merge_EFN[c("EFN", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
EFN_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, EFN == 0), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species\nwithout EFNs (no.)")
#save_plot("legumemap1.png", EFN_N, base_width=8)
EFN_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, EFN == 1), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species\nwith EFNs (no.)")
#save_plot("legumemap2.png", EFN_Y, base_width=8)
legumeefn_map <- plot_grid(EFN_Y, EFN_N, labels=c("A", "B"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_efn_map.pdf",legumeefn_map, base_width=8, base_height = 8)
#Domatia
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, Domatia) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_dom <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_dom$`polygon`)
attribute_data <- merge_dom[c("Domatia", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
Domatia_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, Domatia == 0), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species\nwithout domatia (no.)")
#save_plot("legumemap3.png", Domatia_N, base_width=8)
Domatia_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, Domatia == 1), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species\nwith domatia (no.)")
#save_plot("legumemap4.png", Domatia_Y, base_width=8)
legumedom_map <- plot_grid(Domatia_Y, Domatia_N, labels=c("C", "D"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_dom_map.pdf",legumedom_map , base_width=8, base_height = 8)
#Nodules
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, fixer) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_fix <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_fix$`polygon`)
attribute_data <- merge_fix[c("fixer", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
fixer_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, fixer == 0), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Nodulating\nlegume species (no.)")
#save_plot("legumemap5.png", fixer_N, base_width=8)
fixer_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, fixer == 1), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Non-nodulating\nlegume species (no.)")
#save_plot("legumemap6.png", fixer_Y, base_width=8)
legumefix_map <- plot_grid(fixer_Y, fixer_N, labels=c("E", "F"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_fix_map.pdf",legumefix_map , base_width=8, base_height = 8)
#AM fungi
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, AM) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_AM <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_AM$`polygon`)
attribute_data <- merge_AM[c("AM", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
AM_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, AM == "N"), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species that do\nnot associate with AM fungi (no.)")
#save_plot("legumemap7.png", AM_N, base_width=8)
AM_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, AM == "Y"), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species that\n associate with AM fungi (no.)")
#save_plot("legumemap8.png", AM_Y, base_width=8)
legumeAM_map <- plot_grid(AM_Y, AM_N, labels=c("G", "H"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_AM_map.pdf",legumeAM_map , base_width=8, base_height = 8)
#EM fungi
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, EM) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_EM <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_EM$`polygon`)
attribute_data <- merge_EM[c("EM", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
EM_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, EM == "N"), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species that do\nnot associate with EM fungi (no.)")
#save_plot("legumemap9.png", EM_N, base_width=8)
EM_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, EM == "Y"), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species that\nassociate with EM fungi (no.)")
#save_plot("legumemap10.png", EM_Y, base_width=8)
legumeEM_map <- plot_grid(EM_Y, EM_N, labels=c("I", "J"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_EM_map.pdf",legumeEM_map , base_width=8, base_height = 8)
## Making a similar map for legumes
# Read the .rds file
legume_pol <- readRDS("legume_range_polygons_data.rds")
#legume_range_df <- read.csv("legume_range_traits.csv")
#Extract unique polygons
#There is probably a better way to do this, but this works
tmp <- data.frame(code = NULL, index = NULL)
for (x in 1:length(legume_pol$polygon)) {
if(legume_pol$polygon[[x]]@data$Code %in% tmp$code) next()
tmp <- rbind((data.frame(code = legume_pol$polygon[[x]]@data$Code, index = x)), tmp)
}
unique_pols <- legume_pol[tmp$index, ]
unique_pols <- cbind(unique_pols, tmp)
#This is the base map
base_legume_map <- ggplot()+geom_sf(data = ant_polygons, fill="black")+theme_cowplot()
#+geom_sf(data=sf::st_as_sf(do.call(rbind, unique_pols$`polygon`)), fill="blue")
# Extract codes for each legume species
legume_pol$code<-NA
for (x in 1:length(legume_pol$polygon)) {
legume_pol[x, "code"] <- legume_pol$polygon[[x]]@data$Code
}
#Merge with trait data
merged_legume <- sp::merge(legume_pol, legume_range_df, by.x="species", by.y="Phy", all.x=TRUE, all.y=TRUE,duplicateGeoms = TRUE)
merged_legume <- as.data.frame(merged_legume)
#EFNs
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, EFN) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_EFN <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_EFN$`polygon`)
attribute_data <- merge_EFN[c("EFN", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
EFN_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, EFN == 0), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species\nwithout EFNs (no.)")
#save_plot("legumemap1.png", EFN_N, base_width=8)
EFN_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, EFN == 1), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species\nwith EFNs (no.)")
#save_plot("legumemap2.png", EFN_Y, base_width=8)
legumeefn_map <- plot_grid(EFN_Y, EFN_N, labels=c("A", "B"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_efn_map.pdf",legumeefn_map, base_width=8, base_height = 8)
#Domatia
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, Domatia) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_dom <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_dom$`polygon`)
attribute_data <- merge_dom[c("Domatia", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
Domatia_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, Domatia == 0), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species\nwithout domatia (no.)")
#save_plot("legumemap3.png", Domatia_N, base_width=8)
Domatia_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, Domatia == 1), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species\nwith domatia (no.)")
#save_plot("legumemap4.png", Domatia_Y, base_width=8)
legumedom_map <- plot_grid(Domatia_Y, Domatia_N, labels=c("C", "D"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_dom_map.pdf",legumedom_map , base_width=8, base_height = 8)
#Nodules
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, fixer) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_fix <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_fix$`polygon`)
attribute_data <- merge_fix[c("fixer", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
fixer_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, fixer == 0), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Nodulating\nlegume species (no.)")
#save_plot("legumemap5.png", fixer_N, base_width=8)
fixer_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, fixer == 1), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Non-nodulating\nlegume species (no.)")
#save_plot("legumemap6.png", fixer_Y, base_width=8)
legumefix_map <- plot_grid(fixer_Y, fixer_N, labels=c("E", "F"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_fix_map.pdf",legumefix_map , base_width=8, base_height = 8)
#AM fungi
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, AM) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_AM <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_AM$`polygon`)
attribute_data <- merge_AM[c("AM", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
AM_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, AM == "N"), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species that do\nnot associate with AM fungi (no.)")
#save_plot("legumemap7.png", AM_N, base_width=8)
AM_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, AM == "Y"), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species that\n associate with AM fungi (no.)")
#save_plot("legumemap8.png", AM_Y, base_width=8)
legumeAM_map <- plot_grid(AM_Y, AM_N, labels=c("G", "H"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_AM_map.pdf",legumeAM_map , base_width=8, base_height = 8)
#EM fungi
# Calculate the number of unique species in each polygon
lspecies_counts <- subset(merged_legume, introduced_status == "N") %>%
group_by(code, EM) %>%
summarise(num_species = n_distinct(species))
# Merge with unique polygons
merge_EM <- sp::merge(unique_pols, lspecies_counts, by.x="code", by.y="code")
spatial_polygons <- do.call(rbind, merge_EM$`polygon`)
attribute_data <- merge_EM[c("EM", "num_species")]
spatial_polygons_df <- SpatialPolygonsDataFrame(spatial_polygons, data = attribute_data, match.ID = F)
spatial_polygons_sf <- sf::st_as_sf(spatial_polygons_df)
EM_N <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, EM == "N"), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species that do\nnot associate with EM fungi (no.)")
#save_plot("legumemap9.png", EM_N, base_width=8)
EM_Y <- base_legume_map + geom_sf(data=subset(spatial_polygons_sf, EM == "Y"), aes(fill = num_species))+
scale_fill_gradient(low = 'white', high = 'blue') +
labs(fill = "Legume species that\nassociate with EM fungi (no.)")
#save_plot("legumemap10.png", EM_Y, base_width=8)
legumeEM_map <- plot_grid(EM_Y, EM_N, labels=c("I", "J"), align = 'v', axis='lr', ncol = 1, nrow = 2)
save_plot("legume_EM_map.pdf",legumeEM_map , base_width=8, base_height = 8)
# Read the spatial polygons using sf
ant_polygons <- st_read(dsn = 'Bentity2_shapefile_fullres/', layer = 'Bentity2_shapefile_fullres')
save_plot("EFN_map.png", efn_map, base_width=8, base_height = 8)
